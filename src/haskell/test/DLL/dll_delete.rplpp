class Cell
    int data
    int index
    Cell left
    Cell right
    Cell self

    method setData(int value)
        data ^= value

    method setIndex(int i)
        index ^= i    

    method setLeft(Cell cell)
        left <=> cell

    method setRight(Cell cell)
        right <=> cell

    method setSelf(Cell cell)
        self <=> cell

    method append(Cell cell)
        if right = nil & cell != nil then   // If current cell does not have a right neighbour
            right <=> cell                  // Set new cell as right neighbour of current cell
        
            local Cell selfCopy = nil      
            copy Cell self selfCopy         // Copy reference to current cell
            call right::setLeft(selfCopy)   // Set current cell as left neighbour of newly added right neighbour
            delocal Cell selfCopy = nil

            local int cellIndex = index + 1
            call right::setIndex(cellIndex) // Set cell index in newly added right neightbour of current cell
            delocal int cellIndex = index + 1
        else skip
        fi right != nil & cell = nil

        if right != nil then
            call right::append(cell)        // Keep searching for empty right neighbour
        else skip
        fi right != nil
    
    method getCell(int i, Cell ret)
        if i = index then
            copy Cell self ret 
        else
            call right::getCell(i, ret)
        fi i = index

    method insertBack(Cell inserted)           // turn inserted to nil
         local Cell leftCopy = nil
         local Cell insertedCopy = nil
         local Cell selfCopy = nil

         copy Cell left leftCopy 
         copy Cell inserted insertedCopy 
         copy Cell self selfCopy 

         call inserted::setLeft(left)          // left = nil
         call inserted::setRight(selfCopy)     // selfCopy = nil
         call leftCopy::setRight(insertedCopy) // insertedCopy = self (initially, right of left is self)
         call setLeft(inserted)                // inserted = nil left = inserted(ok)

         delocal Cell leftCopy = nil
         delocal Cell selfCopy = nil
         delocal Cell insertedCopy = self

        
class DoublyLinkedList
    Cell head
    int length

    method appendCell(Cell cell)
        if head = nil & cell != nil then
            head <=> cell
        else skip
        fi head != nil & cell = nil

        if head != nil then 
            call head::append(cell)
        else skip
        fi head != nil

        length += 1

    method getElem(int index, Cell ret)
        call head::getCell(index, ret)

    method insertCell(int index, Cell inserted)
        local Cell cell = nil
            call getElem(index, cell)
            call cell::insertBack(inserted)
            uncall getElem(index, cell)
        delocal Cell cell = nil 

        

class Program
    DoublyLinkedList list
    int listLength

    method main()
        new DoublyLinkedList list
        listLength += 10

        local int x = 0
        from x = 0 do skip
        loop
            local Cell cell = nil
                new Cell cell

                local Cell cellCopy = nil
                copy Cell cell cellCopy
                call cell::setSelf(cellCopy)
                delocal Cell cellCopy = nil

                call cell::setData(x)
                call list::appendCell(cell)
            delocal Cell cell = nil
            x += 1
        until x = listLength
        delocal int x = listLength 



        local Cell cell_test = nil
	local int ind = 2
        new Cell cell_test

        call list::insertCell(ind, cell_test)

	delocal int ind = 2 
        delocal Cell cell_test = nil
